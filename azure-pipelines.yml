trigger:
  branches:
    include:
      - dev
      - master

variables:
  buildConfiguration: 'Release'
  dotnetVersion: '8.0.x'
  azureServiceConnection: 'ServiceConnection_RestAPI_FarmTimeManagement'
  webAppName: 'flindersdevops'
  webAppSlot: 'staging'   # chưa dùng slot

pool:
  name: 'SelfHosted_Agent_Tom'

stages:
# ===================== BUILD (chung) =====================
- stage: Build
  displayName: Build & Test & Package
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetVersion)'

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: '**/*.sln'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '**/*.sln'
        arguments: '--configuration $(buildConfiguration)'
        publishWebProjects: false

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "XPlat Code Coverage"'
      continueOnError: true

    - task: DotNetCoreCLI@2
      displayName: Publish (dotnet publish)
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

    - task: ArchiveFiles@2
      displayName: Zip published output
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/webapp.zip'

    - publish: '$(Build.ArtifactStagingDirectory)/webapp.zip'
      displayName: 'Publish deploy artifact'
      artifact: 'drop'

# ===================== ARTIFACT PROJECT-SRC (master/PR->master) =====================
- stage: Build_Prod_Artifact
  displayName: Build Production Artifact (project-src.zip)
  dependsOn: Build
  condition: >
    and(
      succeeded(),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        and(
          eq(variables['Build.Reason'], 'PullRequest'),
          eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/master')
        )
      )
    )
  jobs:
  - job: PackageSource
    displayName: 'Package project source'
    steps:
    - powershell: |
        $ErrorActionPreference = 'Stop'
        $src    = "$(Build.SourcesDirectory)"
        $outDir = Join-Path "$(Build.ArtifactStagingDirectory)" "project-src"
        $zip    = Join-Path "$(Build.ArtifactStagingDirectory)" "project-src.zip"

        Write-Host "Source: $src"
        Write-Host "Staging: $outDir"
        Write-Host "Zip: $zip"

        if (Test-Path $outDir) { Remove-Item $outDir -Recurse -Force }
        New-Item -ItemType Directory -Path $outDir | Out-Null

        # Dùng ROBOCOPY để copy source nhưng loại trừ thư mục rác
        $excludeDirs = @(".git",".github",".azuredevops","node_modules","bin","obj",".vs",".idea",".vscode")
        $xd = $excludeDirs | ForEach-Object { "/XD `"$($_)`"" } | Out-String
        $xd = $xd -replace "`r?`n"," "

        $cmd = "robocopy `"$src`" `"$outDir`" /E $xd /NFL /NDL /NJH /NJS /NC /NS /NP"
        Write-Host "Running: $cmd"
        cmd.exe /c $cmd | Out-Null

        $rc = $LASTEXITCODE
        # Mã trả về 0–7 của ROBOCOPY được coi là thành công
        if ($rc -gt 7) {
          throw "ROBOCOPY failed with exit code $rc"
        } else {
          Write-Host "ROBOCOPY exit code $rc (OK)"
        }

        if (Test-Path $zip) { Remove-Item $zip -Force }
        Compress-Archive -Path (Join-Path $outDir '*') -DestinationPath $zip -Force
        Write-Host "Created $zip"
      displayName: 'Create project-src.zip'

    - publish: '$(Build.ArtifactStagingDirectory)/project-src.zip'
      displayName: 'Publish production source artifact'
      artifact: 'project-src'

# ===================== DEPLOY (đổi tên hiển thị, vẫn Production) =====================
- stage: Deploy_Prod
  displayName: Deploy to Development
  dependsOn:
    - Build
  condition: >
    and(
      succeeded(),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        and(
          eq(variables['Build.Reason'], 'PullRequest'),
          eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/master')
        )
      )
    )
  jobs:
  - deployment: DeployProd
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'drop'
              path: '$(Pipeline.Workspace)/drop'

          - powershell: |
              $b = $env:BUILD_SOURCEBRANCH
              $r = $env:BUILD_REASON
              $t = $env:SYSTEM_PULLREQUEST_TARGETBRANCH
              if (-not $t) { $t = '<not set>' }
              Write-Host "Build.SourceBranch              = $b"
              Write-Host "Build.Reason                    = $r"
              Write-Host "System.PullRequest.TargetBranch = $t"
              Write-Host "Package path                    = $(Pipeline.Workspace)\drop\webapp.zip"
            displayName: 'Print branch variables'
            failOnStderr: false

          - task: AzureWebApp@1
            displayName: 'Deploy to $(webAppName) (Production slot)'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              appName: '$(webAppName)'
              package: '$(Pipeline.Workspace)/drop/webapp.zip'
